name: buildWa

# Run nightly at 00:00 UTC (02:00 CEST) + manual trigger
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: nightly-qt5
  cancel-in-progress: true

env:
  # disable Qt6, enable Qt5
  C2_BUILD_WITH_QT6: Off
  CONAN_VERSION: 2.11.0
  CHATTERINO_REQUIRE_CLEAN_GIT: On

################################################################
# Windows (Qt 5.12.5)
################################################################
jobs:
  build:
    name: Build ${{ matrix.os }} (Qt ${{ matrix.qt-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            qt-version: 5.12.5
            force-lto: false
            plugins: true
            skip-crashpad: true
            skip-artifact: false

    env:
      C2_ENABLE_LTO: ${{ matrix.force-lto }}
      C2_PLUGINS: ${{ matrix.plugins }}
      C2_ENABLE_CRASHPAD: ${{ matrix.skip-crashpad == false }}
      C2_BUILD_WITH_QT6: Off

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # --- Common: Install Qt5 ---
      - name: Install Qt5
        uses: jurplel/install-qt-action@v4.1.1
        with:
          cache: true
          version: ${{ matrix.qt-version }}

      # --- Windows specific setup ---
      - name: Enable MSVC Dev Cmd (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Install sccache (Windows)
        if: matrix.os == 'windows-latest'
        uses: hendrikmuhs/ccache-action@v1.2.16

      - name: Install Conan (Windows)
        if: matrix.os == 'windows-latest'
        run: pip install conan==${{ env.CONAN_VERSION }}
        shell: bash

      - name: Create Conan default profile (Windows)
        if: matrix.os == 'windows-latest'
        run: conan profile detect --force
        shell: bash

      - name: Conan install (Windows)
        #if: matrix.os == 'windows-latest'
        run: |
          mkdir build && cd build
          conan install .. \
          -s build_type=RelWithDebInfo \
          -c tools.cmake.cmaketoolchain:generator="NMake Makefiles" \
          -o openssl/*:with_openssl3=False \
          --build=openssl/* \
          --build=missing \
          --output-folder=.
        shell: bash

      # --- Configure & Build ---
      - name: Configure & build
        run: |
          cd build
          cmake .. -G "NMake Makefiles" \
            -DCHATTERINO_REQUIRE_CLEAN_GIT=Off
          nmake /S /NOLOGO
        shell: bash

      # --- Bundle & Package ---
      - name: Bundle & package
        run: |
          cd build
            # Copy Qt runtime DLLs and exe into Chatterino2/
            windeployqt bin/chatterino.exe --release --no-translations --dir Chatterino2/
            copy bin\chatterino.exe Chatterino2\
            7z a chatterino-windows-x86-64-Qt-${{ matrix.qt-version }}.zip Chatterino2
        shell: bash
      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: chatterino-windows-x86-64-Qt-${{ matrix.qt-version }}.zip
          path: build/chatterino-windows-x86-64-Qt-${{ matrix.qt-version }}.zip
################################################################
# Create Nightly Release
################################################################
  create-release:
    name: Create nightly GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          name: '*'

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.15.0
        with:
          tag: nightly-qt5-${{ github.run_number }}
          name: Qt5 Nightly #${{ github.run_number }}
          prerelease: true
          artifacts: 'release-artifacts/*'
